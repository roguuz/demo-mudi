pipeline {
    agent any

    tools {
        maven 'maven'
    }
    environment {
        env = "demo"
        app_name = "demo-mudi"
        tag = "${env}_${BUILD_ID}"
        region = "us-west-1"
        ecr_repo = "219252656223.dkr.ecr.us-west-1.amazonaws.com"
        cluster = "demo-mudi"
        memory = "1024"
        port = 8080
    }
    stages {
        stage('Build') {
            steps {
                sh (
                    script: '''
                    cd demo-app
                    mvn clean install
                    aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecr_repo}
                    docker build -t ${ecr_repo}/${app_name}:${tag} .
                    docker push ${ecr_repo}/${app_name}:${tag}
                    ''',
                    returnStdout: true
                    )
            }
        }
        stage('Deploy') {
            steps{
                sh (
                    script: '''
                    IMAGE=${ecr_repo}/${app_name}:${tag}
                    TASK_DEF=$(aws ecs register-task-definition --region ${region} --family ${app_name} --network-mode bridge --container-definitions '[{"name": "'${app_name}'", "image": "'${IMAGE}'", "portMappings": [{"containerPort": '${port}', "hostPort": 0,"protocol": "tcp"}] }]' --memory ${memory} --query 'taskDefinition.revision')
                    aws ecs update-service --cluster ${cluster} --region ${region} --service ${app_name}-svc --task-definition ${app_name}:$TASK_DEF --desired-count 1 --force-new-deployment
                    echo "deployed!"
                    ''',
                    returnStdout: true
                )
            }
        }

    }
        post {
            always {
                cleanWs deleteDirs: true, notFailBuild: true
            }
        }
}
