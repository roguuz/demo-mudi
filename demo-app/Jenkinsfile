pipeline {
    agent any

    tools {
        maven 'maven'
    }
    environment {
        env = "demo"
        app_name = "demo-mudi"
        tag = "${env}_${BUILD_ID}"
        region = "us-west-1"
        ecr_repo = "219252656223.dkr.ecr.us-west-1.amazonaws.com"
        cluster = "demo-mudi"
        memoryReservation = "1024"
        port = 8080
    }
    stages {
        stage('Build') {
            steps {
                sh (
                    script: '''
                    cd demo-app
                    mvn clean install
                    aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecr_repo}
                    docker build -t ${ecr_repo}/${app_name}:${tag} .
                    docker push ${ecr_repo}/${app_name}:${tag}
                    ''',
                    returnStdout: true
                    )
            }
        }
        stage('Deploy') {
            steps{
                sh (
                    script: '''
                    IMAGE=${ecr_repo}/${app_name}:${tag}
                    
                    td_arn=$(aws ecs describe-services --services ${app_name}-svc  --cluster ${cluster} --query 'services[0].taskDefinition' --region ${region} | tr -d '"' )                    
                    aws ecs describe-task-definition --task-definition $td_arn --query 'taskDefinition' --output json --region ${region} > td-tmp.json
                    jq '.containerDefinitions[0].image = "${IMAGE}" | del(.revision, .status , .compatibilities ,.taskDefinitionArn ,.requiresAttributes)' td-tmp.json > td.json
                    new_td_arn=$(aws ecs register-task-definition --cli-input-json file://td.json --region ${region} | jq -r '.taskDefinition.taskDefinitionArn')
                    aws ecs update-service --cluster ${cluster} --region ${region} --service ${app_name}-svc --task-definition ${new_td_arn} --desired-count 1 --force-new-deployment
                    echo "deployed!"
                    ''',
                    returnStdout: true
                )
            }
        }

    }
        post {
            always {
                cleanWs deleteDirs: true, notFailBuild: true
            }
        }
}
